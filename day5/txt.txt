import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns 
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix,accuracy_score,classification_report

df=pd.read_csv("employee.csv")

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

df['BusinessTravel']=label_encoder.fit_transform(df['BusinessTravel'])
print(label_encoder.classes_)

df['Department']=label_encoder.fit_transform(df['Department'])
print(label_encoder.classes_)

df['EducationField']=label_encoder.fit_transform(df['EducationField'])
print(label_encoder.classes_)

df['Gender']=label_encoder.fit_transform(df['Gender'])
print(label_encoder.classes_)

df['JobRole']=label_encoder.fit_transform(df['JobRole'])
print(label_encoder.classes_)

df['MaritalStatus']=label_encoder.fit_transform(df['MaritalStatus'])
print(label_encoder.classes_)

df['OverTime']=label_encoder.fit_transform(df['OverTime'])
print(label_encoder.classes_)

df['Attrition']=label_encoder.fit_transform(df['Attrition'])
print(label_encoder.classes_)

df.drop('Over18',axis=1,inplace=True)


features=['Age','BusinessTravel','DailyRate','Department','DistanceFromHome','Education','EducationField','EmployeeCount','EmployeeNumber','EnvironmentSatisfaction','Gender','HourlyRate','JobInvolvement','JobLevel','JobRole','JobSatisfaction','MaritalStatus','MonthlyIncome','MonthlyRate','NumCompaniesWorked','OverTime','PercentSalaryHike','PerformanceRating','RelationshipSatisfaction','StandardHours','StockOptionLevel','TotalWorkingYears','TrainingTimesLastYear','WorkLifeBalance','YearsAtCompany','YearsInCurrentRole','YearsSinceLastPromotion','YearsWithCurrManager']
x=df[features]
y=df[['Attrition']]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

model=LogisticRegression(solver='liblinear',max_iter=1000)
model.fit(x_train,y_train)
print("Model training complete")

y_pred=model.predict(x_test)

#Accuracy
acc=accuracy_score(y_test,y_pred)
print(f"\nAccuracy: {acc:.2f}")

#Detailed classification report 
print("\nClassification Report: ")
print(classification_report(y_test,y_pred))